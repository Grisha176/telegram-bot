package ru.practicum.service;


import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.practicum.BotMessageSender;
import ru.practicum.model.Appointment;
import ru.practicum.repository.AppointmentRepository;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@Transactional
@RequiredArgsConstructor
public class AppointmentService {

    private final AppointmentRepository appointmentRepository;
    private final DoctorService doctorService;
    private final BotMessageSender botMessageSender;
    private final MenuService menuService;


    public void sendArchiveRecords(Long chatId) {
        List<Appointment> archive = appointmentRepository.findByChatIdAndAppointmentTimeBefore(chatId, LocalDateTime.now());

        if (archive.isEmpty()) {
            botMessageSender.sendMessage(chatId, "üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç", menuService.buildMainMenuKeyboard());
            return;
        }

        StringBuilder sb = new StringBuilder("üìÇ –ê—Ä—Ö–∏–≤ –∑–∞–ø–∏—Å–µ–π:\n\n");

        for (Appointment a : archive) {
            sb.append("üë®‚Äç‚öïÔ∏è ").append(doctorService.getDoctorById(a.getDoctorId()).getFirstName()).append("\n");
            sb.append("üìÖ ").append(a.getAppointmentTime().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))).append("\n\n");
        }

        botMessageSender.sendMessage(chatId, sb.toString(), menuService.buildMainMenuKeyboard());
    }

    // üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    public void sendMyRecords(Long chatId) {
        List<Appointment> records = appointmentRepository.findByChatIdAndConfirmedTrue(chatId);

        if (records.isEmpty()) {
            botMessageSender.sendMessage(chatId,"üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π", menuService.buildMainMenuKeyboard());
            return;
        }

        StringBuilder sb = new StringBuilder("üìå –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n");

        for (Appointment a : records) {
            sb.append("üë®‚Äç‚öïÔ∏è ").append(doctorService.getDoctorById(a.getDoctorId()).getFirstName()).append(" ")
                    .append(doctorService.getDoctorById(a.getDoctorId()).getLastName()).append("\n");
            sb.append("üìÖ ").append(a.getAppointmentTime().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))).append("\n\n");
        }

        botMessageSender.sendMessage(chatId, sb.toString(), menuService.buildMainMenuKeyboard());
    }

    // üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã
    public void sendCancelMenu(Long chatId) {
        List<Appointment> records = appointmentRepository.findByChatIdAndConfirmedTrue(chatId);
        if(records.isEmpty()){
            botMessageSender.sendMessage(chatId,"üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π", menuService.buildMainMenuKeyboard());
            return;
        }
        InlineKeyboardMarkup keyboard = menuService.buildCancelMenu(records);
        botMessageSender.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", keyboard);
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ createAppointment ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    public Appointment createAppointment(Long chatId, Long doctorId, LocalDateTime appointmentTime) {
        Appointment appointment = new Appointment();
        appointment.setChatId(chatId);
        appointment.setDoctorId(doctorId);
        appointment.setAppointmentTime(appointmentTime);
        appointment.setConfirmed(true);
        appointment.setReminded24Hours(false);
        appointment.setReminded2Hours(false);

        appointment =  appointmentRepository.save(appointment);
        return appointment;
    }

    // üö´ –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID
    public void cancelAppointment(Long appointmentId) {
        Appointment app = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        app.setConfirmed(false);
        appointmentRepository.save(app);
    }

    // üìÖ –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public List<Appointment> getUserAppointments(Long chatId) {
        return appointmentRepository.findByChatIdAndConfirmedTrue(chatId);
    }

    // ‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –≤—Ä–µ–º—è
    public boolean isSlotFree(Long doctorId, LocalDateTime time) {
        return !isSlotTaken(doctorId, time);
    }

    private boolean isSlotTaken(Long doctorId, LocalDateTime time) {
        return appointmentRepository.findByDoctorIdAndAppointmentTime(doctorId, time).isPresent();
    }
}
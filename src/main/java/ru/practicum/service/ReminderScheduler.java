package ru.practicum.service;

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import ru.practicum.model.Appointment;
import ru.practicum.repository.AppointmentRepository;


import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
public class ReminderScheduler {

    private final AppointmentRepository appointmentRepository;
    private final NotificationService notificationService;
    private final TelegramLongPollingBot bot;

    // –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    @Scheduled(fixedRate = 60000)
    public void checkReminders() {
        LocalDateTime now = LocalDateTime.now().plusHours(2);

        // –ó–∞–ø–∏—Å–∏ –∑–∞ 24 —á–∞—Å–∞
        List<Appointment> tomorrowApps = appointmentRepository.findByAppointmentTimeBetween(now, now.plus(Duration.ofHours(24)));

        // –ó–∞–ø–∏—Å–∏ –∑–∞ 2 —á–∞—Å–∞
        now = LocalDateTime.now();
        List<Appointment> twoHourApps = appointmentRepository.findByAppointmentTimeBetween(
                now.plus(Duration.ofHours(2)),
                now.plus(Duration.ofHours(2)).plusMinutes(10) // –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–∫–∏
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        for (Appointment app : tomorrowApps) {
            if (!app.isReminded24Hours() && app.isConfirmed()) {
                notificationService.sendReminders(List.of(app), "üîî –£ –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏—ë–º!" , bot);
                mark24HoursReminded(app);
            }
        }

        for (Appointment app : twoHourApps) {
            if (!app.isReminded2Hours() && app.isConfirmed()) {
                notificationService.sendReminders(List.of(app), "‚è∞ –£ –≤–∞—Å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏—ë–º!", bot);
                mark2HoursReminded(app);
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ reminded24Hours
    private void mark24HoursReminded(Appointment appointment) {
        appointment.setReminded24Hours(true);
        appointmentRepository.save(appointment);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ reminded2Hours
    private void mark2HoursReminded(Appointment appointment) {
        appointment.setReminded2Hours(true);
        appointmentRepository.save(appointment);
    }
}